webkit
:is(p,div) {
  background-color: rebeccapurple;
  color: green;
}
/* Variable to configure elements's parameter */
:root {
  
  /* Format parameter */

    --M-titleFont: serif;
    --M-fontA: sans-serif;
    --M-fontB: cursive;

  /* Layout parameter */

    --M-height: 100%;
    --M-width: 100%;
    --M-gap: initial;
    --M-columns: 1fr;
    --M-rows: 1fr;
    --M-align: initial;
    --M-justify: initial;
    --M-margin: initial;
    --M-paddingLeft: initial;
    --M-paddingRight: var(--M-padding-left);
    --M-paddingTop: var(--M-paddingLeft);
    --M-paddingBottom: var(--M-paddingTop);
    --M-flow: row;
    --M-repeat: initial;
    --M-type: auto;
    --M-Xpos: auto;
    --M-Ypos: auto;
    --M-Xsize: 1;
    --M-Ysize: 1;
    --M-shader: 0.5;
    --M-radius: 0;
    --M-border: none;
    --M-borderWidth: none;
    --M-borderStyle: none;
    --M-borderColor: none;
    
  /* Style parameter */

    /* Red bits variables */
    --M-primaryR: 255;
    --M-secondaryR: var(--M-primaryR);
    --M-red: 255;
    /* Green bits variables */
    --M-primaryG: 255;
    --M-secondaryG: var(--M-primaryG);
    --M-green: 255;
    /* Blue bits variables */
    --M-primaryB: 255;
    --M-secondaryB: var(--M-primaryB);
    --M-blue: 255;
    /* Opacity variables */
    --M-primaryA: 1;
    --M-secondaryA: var(--M-primaryA);
    --M-opacity: 1;
    
}


          /**************************************/
          /*              Globals               */
          /**************************************/


/* dependent variables */
[class*="M-"], [class*="M-"]>*  {
  all: unset;
  /* constrast variable. if background-color is dark, --M-color equal 255 else --M-color equal 0 */
  --M-bits: calc(((((var(--M-red) * 299) + (var(--M-green) * 587) + (var(--M-blue) * 114)) / 1000) - 128) * -1000);
  --M-color: rgb(var(--M-bits),var(--M-bits),var(--M-bits));
  
  /* dependence of the variables "padding" on the variable "--M-padding-left"*/
  --M-paddingRight: var(--M-paddingLeft);
  --M-paddingTop: var(--M-paddingLeft);
  --M-paddingBottom: var(--M-paddingTop);

  /* dependence of the variables "--M-barder" on the other variable "--M-border"  */
  --M-border: var(--M-borderWidth) var(--M-borderStyle) var(--M-borderColor);
}
input[class*="M-"], [class*="M-"] > input {
  border-style: double;
  border-width: 1px;
  border-radius: 2.5px;
}


          /**************************************/
          /*              Simple                */
          /**************************************/


/* -Button(inprocess)- */

  /* Type 1 */
.M-btn{
  --M-red: 255;
  --M-green: 255;
  --M-blue: 255;
  --M-opacity: 1;

  padding: 2px 6px;
  background: linear-gradient(
    rgb(var(--M-red), var(--M-green), var(--M-blue)),
    rgb(calc(var(--M-red)*0.9), calc(var(--M-green)*0.9), calc(var(--M-blue)*0.9))
  );
  border: solid 1px rgb(calc(var(--M-red)*0.9), calc(var(--M-green)*0.9), calc(var(--M-blue)*0.9));
  border-radius: 2px;
  outline: none;
  justify-content: center;
  align-content: center;
  text-decoration: none;
  color: var(--M-color);
  font: 400 13.3333px Arial;
}
.M-btn:hover {
  border-color: rgb(calc(var(--M-red)/2), calc(var(--M-green)/2), calc(var(--M-blue)/2));
}
.M-btn:active {
  background: linear-gradient(
    rgb(calc(var(--M-red)*0.9), calc(var(--M-green)*0.9), calc(var(--M-blue)*0.9)),
    rgb(var(--M-red), var(--M-green), var(--M-blue))
  );
  border-color: rgb(calc(var(--M-red)*0.7), calc(var(--M-green)*0.7), calc(var(--M-blue)*0.7));

}

/* -Card(inprocess)- */

  /* Type-1 */
  .M-card {
    --M-width: 150px;
    --M-height: calc(var(--M-width) * 1.5);
    display: inline-grid;
    position: relative;
    margin: var(--M-margin);
    width: var(--M-width);
    height: var(--M-height);
  }
  .M-card:empty::before {
    --M-red: var(--M-secondaryR);
    --M-green: var(--M-secondaryG);
    --M-blue: var(--M-secondaryB);
  }
  .M-card:empty::before, .M-card:empty::after {
    content: "";
    background-color: rgb(var(--M-red), var(--M-green), var(--M-blue));
  }
  .M-card:not([class*="T-"]) {
    grid-template-rows: 40% 60%;
  }
  /* Type-2 */
  .M-card.T-2>:first-child, .M-card.T-2:empty>::before {
    position: absolute;
    width: var(--M-width);
    height: var(--M-height);
    z-index: -1;
  } 
  .M-card.T-2>:nth-child(2), .M-card.T-2:empty>::before {
    --M-paddingBottom: var(--M-paddingLeft);
    margin: var(--M-paddingTop) var(--M-paddingRight) var(--M-paddingBottom) var(--M-paddingLeft);
  }
/* -Form(inprocess)- */

  /* Type 1 */
.M-form {
  display: grid;
  width: calc(100% - 2em);
  height: fit-content;
  overflow-y: auto;
  gap: 5px 15px;
  margin: 1em;
  padding: .5em;
  justify-content: center;
}
.M-form > label:hover {
  text-decoration: underline;
  cursor: pointer;
}
.M-form:not([class*="T-"]) > input {
  grid-column: 2;
}
.M-form:not([class*="T-"]) > label {
  align-self: center;
  justify-self: right;
  grid-column: 1;
}
  /* Type 2 */
.M-form.T-2 > label {
  justify-self: center;
}

/* -List(inprocess)- */

  /* Type 1 */
.M-list{
  display: grid;
  padding-left: 25px;
}
:not(ol):not(ul).M-list {
  list-style-type: " - ";
}
.M-list > *{
  display: list-item;
}
/* -ProgressBar(inprocess)- */

  /* Type 1 */
.M-bar {
  --M-secondaryR: 0;
  --M-secondaryG: 0;
  --M-secondaryB: 255;
  --M-primaryR: 255;
  --M-primaryG: 255;
  --M-primaryB: 255;
  overflow: hidden;
  display: grid;
  width: 200px;
  position: relative;
  height: 1em;
  border: 1px double;
  border-radius: 2.5px;
}
.M-bar::before {
  position: absolute;
  display: inline-grid;
  align-content: center;
  justify-content: center;
  content: "50%";
  color: var(--M-color);
  width: 200px;
  height: 100%;
}
.M-bar>:nth-child(1) {
  --M-red: var(--M-secondaryR);
  --M-green: var(--M-secondaryG);
  --M-blue: var(--M-secondaryB);
  position: relative;
  background-color: rgb(var(--M-red), var(--M-green), var(--M-blue));
  overflow: hidden;
  width: 50%;
  height: 100%;
  border-radius: 2.5px;
}
.M-bar>:nth-child(1)::before {
  display: inline-grid;
  align-content: center;
  justify-content: center;
  position: absolute;
  content: "50%";
  color: var(--M-color);
  width: 200px;
  height: 100%;
}

/* -Pagination(inprocess)- */

  /* Type 1 */
.M-page {
  --M-primaryR: 255;
  --M-primaryG: 255;
  --M-primaryB: 255;
  --M-secondaryR: 0;
  --M-secondaryG: 0;
  --M-secondaryB: 255;
  --M-red: var(--M-primaryR);
  --M-green: var(--M-primaryG);
  --M-blue: var(--M-primaryB);
  --M-type: decimal;

  counter-reset: pageN;
  display: grid;
  grid-template-columns: repeat(auto-fit, 50px);
  grid-auto-rows: 50px;
  justify-content: center;
}
.M-page>[type="radio"] {
  display: none;
}
.M-page > :not(input) {
  display: inline-grid;
  align-content: center;
  justify-content: center;
  color: var(--M-color);
  cursor: pointer;
}
.M-page:not([class*='T-']) > :not(input) {
  width: fit-content;
  height: fit-content;
  align-self: center;
  justify-self: center;
}
.M-page > :not(input)::before {
  counter-increment: pageN;
  content: counter(pageN, var(--M-type));
  color: rgb(var(--M-red), var(--M-green), var(--M-blue), var(--M-opacity));
}
.M-page > :not(input):hover::before {
  text-decoration: underline;
}
.M-page > :checked + label, .M-page > :not(input).active {
  --M-red: var(--M-secondaryR);
  --M-green: var(--M-secondaryG);
  --M-blue: var(--M-secondaryB);
  color: rgb(var(--M-red), var(--M-green), var(--M-blue), var(--M-opacity));
}
  /* Type 2 */
  .M-page.T-2 > :not(input) {
    align-content: center;
    justify-content: center;
  }
.M-page.T-2 > :not(input)::before {
  background-color: rgb(var(--M-red), var(--M-green), var(--M-blue), var(--M-opacity));
  color: var(--M-color);
}
.M-page.T-2 > :checked + label, .M-page.T-2 > :not(input).active {
  background-color: rgb(var(--M-red), var(--M-green), var(--M-blue), var(--M-opacity));
  color: var(--M-color);
}

/* -Searchbar(inprocess)- */
.M-search{
  --M-width: 50%
}
  /* Type 1 */
[contenteditable="true"].M-search, input[type="text"].M-search, textarea.M-search,
.M-search:not([contenteditable="true"]):not(input):not(textarea) {
  position: relative;
  overflow: hidden;
  width: 50%;
  border-radius: 50px;
  margin: 0em;
  margin: 5px;
  border: 1px double #575756;
  box-sizing: border-box;
}
[contenteditable="true"].M-search, input[type="text"].M-search, textarea.M-search,
.M-search:not([contenteditable="true"]):not(input):not(textarea)> [contenteditable="true"],
.M-search:not([contenteditable="true"]):not(input):not(textarea)> input[type="text"],
.M-search:not([contenteditable="true"]):not(input):not(textarea)> textarea {
  
  padding: 12px 24px;
  font-size: 14px;
  line-height: 18px;
  outline: 0;
  
  /* inputifinator */
  background-color: white;
  text-indent: 0px;
  display: inline-block;
  text-align: start;
  cursor: text;
  font: 400 13.3333px Arial;
  -moz-user-modify: read-write;
  -webkit-user-modify: read-write;
}

.M-search:not([contenteditable="true"]):not(input):not(textarea)> [contenteditable="true"],
.M-search:not([contenteditable="true"]):not(input):not(textarea)> input[type="text"],
.M-search:not([contenteditable="true"]):not(input):not(textarea)> textarea {
  border: none;
  border-radius: 50px;
}
.M-search:not([contenteditable="true"]):not(input):not(textarea) {
  display: grid;
  grid-auto-flow: column;
  grid-template-columns: 1fr auto ;
}

[contenteditable="true"].M-search:empty::before,
textarea.M-search:empty::before,
.M-search:not([contenteditable="true"]):not(input):not(textarea)> [contenteditable="true"]:empty::before,
.M-search:not([contenteditable="true"]):not(input):not(textarea)> textarea:empty::before {
  content: attr(placeholder);
  color: var(--M-color);
  opacity: 0.7;
}
.M-search:not([contenteditable="true"]):not(input):not(textarea)> i {
  height: fit-content;
  width: fit-content;
  align-self: center;
  margin: 0 2.5px;
} 
  /* Type 2 */
[contenteditable="true"].M-search.T-2, input[type="text"].M-search.T-2, textarea.M-search.T-2,
.M-search:not([contenteditable="true"]):not(input):not(textarea).T-2 {
  border-top-color: transparent;
  border-left-color: transparent;
  border-right-color: transparent;
  border-radius: 0;
}
  
/* -Switch(inprocess)- */
.M-switch {
  --M-width: 4em;
  --M-height: 1.5em;
  --M-radius: 25px;
  --M-shader: .75;
  --M-margin: 5px;
  --M-borderWidth: 5px;
  --M-borderStyle: solid;
  --M-borderColor: grey;
}
.M-switch > *, .M-switch:empty {
  position: relative;
  display: inline-grid;
  grid-auto-rows: 100%;
  align-items: center;
  width: var(--M-width);
  height: var(--M-height);
  cursor: pointer;
  transition: 350ms;
  padding: 0;
  margin: calc( (((var(--M-height) * var(--M-shader)) - var(--M-height)) / 2 ) + var(--M-margin) ) var(--M-margin);
  box-sizing: content-box;
  font: initial;
  outline: none;
  top: var(--M-borderWidth);
  border: 0;
}
.M-switch > *::after, .M-switch:empty::after {
  position: relative;
  content: '';
  width: calc(var(--M-height) * var(--M-shader));
  height: calc(var(--M-height) * var(--M-shader));
  left: calc(((var(--M-height) * var(--M-shader)) - var(--M-height))/ -2 );
  border-radius: calc(var(--M-radius) - (var(--M-borderWidth) * 1.25));
  transition: 250ms ease-in-out;
  background: linear-gradient(#f5f5f5 10%, #eeeeee);
  box-shadow: 0 0.1em 0.15em -0.05em rgba(255, 255, 255, 0.9) inset, 0 0 0.5em -0.15em rgba(0, 0, 0, 0.5);
  grid-row: 1;
  grid-column: 1;
}
.M-switch > *::before, .M-switch:empty::before {
  content: '';
  width: 100%;
  height: 100%;
  transition: 250ms ease-in-out;
  background: linear-gradient(rgba(0, 0, 0, 0.07), rgba(255, 255, 255, 0.1)), #d0d0d0;
  box-shadow: 0 0.08em 0.15em -0.1em rgba(0, 0, 0, 0.5) inset,
  0 0.05em 0.08em -0.01em rgba(255, 255, 255, 0.7),
  0 0 0 0 rgba(68, 204, 102, 0.7) inset,
  calc(var(--M-width) * -1) 0 0 0 rgba(204, 68, 68, 0.7) inset;
  grid-row: 1;
  grid-column: 1;
  border: var(--M-border);
  border-radius: var(--M-radius);
  justify-self: center;
}
.M-switch > :checked + ::before,
:checked + .M-switch:empty::before,
.M-switch > .active::before,
.M-switch.active:empty::before,
.M-switch:checked:empty::before {
  box-shadow: 0 0.08em 0.15em -0.1em rgba(0, 0, 0, 0.5) inset,
  0 0.05em 0.08em -0.01em rgba(255, 255, 255, 0.7),
  var(--M-width) 0 0 0 rgba(68, 204, 102, 0.7) inset,
  0 0 0 0 rgba(204, 68, 68, 0.7) inset;
}
.M-switch > :checked + ::after,
:checked + .M-switch:empty::after,
.M-switch > .active::after,
.M-switch.active:empty::after,
.M-switch:checked:empty::after {
  left: calc( var(--M-width) - (( var(--M-height) * var(--M-shader) ) - (var(--M-height) * (( var(--M-shader) - 1)/2) )));
}
.M-switch > input {
  display: none;
}

          /**************************************/
          /*             Complex                */
          /**************************************/



/*______Contained______*/


/* -Breadcrumb- */

  /* Type 1 */

/* -Slider- */

  /* Type 1 */

/* -Slide- */


/*______Mixte______*/


/* -Box- */

  /* Type 1 */

/* -Menu- */

  /* Type 1 */
  .M-menu {
    display: inline-grid;
    grid-template-rows: 100%;
    width: 100%;
    height: 4em;
  }
  .M-menu>:first-child {
    display: inline-grid;
    align-content: center;
    justify-content: center;
  }
  .M-menu>:last-child {
    display: inline-grid;
    grid-auto-rows: 4em;
    transform: scale(1,0);
    transform-origin: top;
  }
  .M-menu:hover>:last-child {
    transform: scale(1);
  }

/* -Nav- */

/* -Grid- */

  /* Type 1 */
.M-grid {
  display: grid;
  gap: var(--M-Gap);
  grid-template-columns: repeat(var(--M-type), var(--M-Columns));
  grid-auto-rows: 1fr;
  width: var(--M-width);
}
.M-grid:not(:empty):before {
  content: '';
  width: 0;
  padding-bottom: var(--M-Rows);
  grid-row: 1 / 1;
  grid-column: 1 / 1;
}
.M-grid>*:first-child {
  grid-row: 1 / 1;
  grid-column: 1 / 1
}


/*______Container______*/


/* -Modal- */

  /* Type-1 */
.M-modal.active, :checked+.M-modal {
  display: grid;
  grid-template-columns: var(--M-Columns);
  grid-auto-rows: var(--M-rows);
}
.M-modal {
  --M-Margin: 2.5em;
  --M-opacity: 0.5;
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  margin: var(--M-Margin);
  background-color: rgb(var(--M-red), var(--M-green), var(--M-blue));
}
  /* Type-2 */
.M-modal.full {
  margin: 0;
  padding: var(--M-Margin);
  background-color: rgba(calc(var(--M-red)*0.1), calc(var(--M-green)*0.1), calc(var(--M-blue)*0.1), var(--M-opacity));
}
.M-modal.full>*, .M-modal.full:empty::before {
  background-color: rgb(var(--M-red), var(--M-green), var(--M-blue));
}
.M-modal.full:empty::before {
  content: "";
}